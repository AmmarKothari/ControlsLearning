function  TEST_getTrackingController()

run('../../ME149_Spring2018/codeLibrary/addLibraryToPath.m')
%%
%       .m = mass of the quadrotor
%       .w = distance between the rotors (width)
%       .g = gravity acceleration

[ref, param] = importReferenceTrajectory('quadrotorOptimalFlipData.csv', 'quadrotorOptimalFlipParam.csv');

fprintf('Test 1 \n');
z0 = ppval(ref.state, 0); % state at t=0
run_test(z0, ref, param, false);

% fprintf('Test 2 \n');
% z0 = [0; 0; 0; 0; 0; 0];
% run_test(z0, hover_des, param, false);
% 
% fprintf('Test 3 \n');
% z0 = -1*ones(1,6);
% hover_des = [5,2];
% run_test(z0, hover_des, param, false);
% 
% fprintf('Test 4 \n');
% param.m = 0.1;
% param.w = 1.0;
% z0 = -1*ones(1,6);
% hover_des = [5,2];
% run_test(z0, hover_des, param, true);

end

function run_test(z0, ref, param, showPlot)

    trackingController = getTrackingController(ref, param);

    t_step = 0.01;
    t_final = 5;

    sim_func = @(t,z) planarQuadrotorRealDyn(t, z, trackingController(t,z), param);

    [T,Y] = ode45(sim_func, [0 t_final, z0);
    u = trackingController(Y');

    q_end = mean(Y(end-50:end,:));
    SteadyStateError = norm(q_end(1:2) - hover_des);

    fprintf('Parameters: w - %0.2f, m - %0.2f, g - %0.2f \n', param.w, param.m, param.g)
    fprintf('Start State: [%0.2f,%0.2f, %0.2f, %0.2f, %0.2f, %0.2f] \n', z0);
    fprintf('End State:   [%0.2f,%0.2f, %0.2f, %0.2f, %0.2f, %0.2f] \n', hover_des, zeros(1,4));
    fprintf('Steady State Error: %0.3f\n\n', SteadyStateError)
    if showPlot
        figure()
        planarQuadrotorPlot(T, Y', u, param, false)
    end


end
% planarQuadrotorPlot(T, Y', u, param, true)

% planarQuadrotorRealDyn
% planarQuadrotorAnimate
% planarQuadrotorPlot